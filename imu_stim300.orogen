#!/usr/bin/env ruby
name "imu_stim300"

# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
using_library 'imu_stim300'
using_library 'quater_ikf'
using_library "aggregator"
import_types_from "imu_stim300Types.hpp"

# If the component/deployments use data types that are defined in other oroGen
# projects, these projects should be imported there as well.
import_types_from "base"
import_types_from "aggregator"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the imu_stim300 namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #***************************
    #**** Driver Properties ****
    #***************************
    property('port', '/std/string', "/dev/ttyUSB0").
        doc 'the device port'

    property('revision', 'imu_stim300::FIRMWARE_REVISIONS').
        doc 'Firmware revision.'

    property('baudrate', 'int', 921600).
        doc 'Baud rate to open the serial com_port and debug_port.'

    property('timeout', 'double', 0.008).
        doc 'the expected time (in seconds) to have a whole package in the fd (the device port)'+
	    'by default 0.008 seconds which corresponds to 125Hz (it should be the sensor sampling frequency).'

    property('use_filter', 'bool', true).
        doc 'set to true to active the attitude estimation filter, set false otherwise.'+
        'In true mode inertial sensors output port will be compensated and calibrated values'+
        'In false mode inertial sensors output will be only calibrated values and no orientation samples will be provided.'

    #****************************
    #**** Filter Properties *****
    #****************************
    property('filter_configuration', 'imu_stim300/FilterConfiguration').
        doc 'General configuration values to run the task'

    #*********************************************
    #**** Inertial Measurement Unit Properties ***
    #*********************************************
    property('accelerometer_noise','imu_stim300/InertialNoiseParameters').
        doc 'Inertial Sensors property.'

    property('gyroscope_noise','imu_stim300/InertialNoiseParameters').
        doc 'Inertial Sensors property.'

    property('inclinometer_noise','imu_stim300/InertialNoiseParameters').
        doc 'Inertial Sensors property.'

    property('use_input_bias', 'bool', false).
        doc 'set to true to take the estimated bias values of the sensors through config values.'

    property('biasacc','/std/vector<double>').
        doc '3 values of estimated bias. Axis order is X, Y, Z'

    property('biasgyro','/std/vector<double>').
        doc '3 values of estimated bias. Axis order is X, Y, Z'

    property('bias_estimation_file','/std/string').
        doc 'filename where to store the estimated bias values.'

    #****************************
    #**** Adaptive Properties ***
    #****************************
    property('adaptive_config_acc', 'imu_stim300/AdaptiveAttitudeConfig').
        doc 'Adaptive estimation of external acceleration.'

    property('adaptive_config_inc', 'imu_stim300/AdaptiveAttitudeConfig').
        doc 'Adaptive estimation of external inclinometers.'

    #******************************input_port(
    #**** Location Properties *****
    #******************************
    property('location',"imu_stim300/LocationConfiguration").
        doc 'Localization properties related to the geographic place (i.e.: latitude, longitude, magnetic declination).'

    property('init_heading','double', 0.0).
        doc 'Initial heading in degrees of the imu sensor within the reference frame defined as North/West/Up, e.g. 0 deg points North and 90 deg points West'

    #******************************
    #******* Input ports  *********
    #******************************

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('inertial_sensors_out', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated sensor readings.'+
        'Calibrated values are temperature corrected as the device reports the values (linear acceleration and angular velocity).'

    output_port('compensated_sensors_out', '/base/samples/IMUSensors').
        doc 'provides timestamped IMUReading samples containing the calibrated and compensated sensor readings depending whether the attutide filter is running'+
        'Compensated values are Earth gravity/rotation and bias compensated angular velocity and linear acceleration from the filter.'

    output_port('compensated_inclinations_out', '/imu_stim300/Inclinations').
        doc 'provides timestamped orientation samples computed from the inclinometers of the IMU'+
        'Compensated values are bias compensated inclinations from the filter.'

    output_port('orientation_samples_out', '/base/samples/RigidBodyState').
        doc 'provides timestamped IMU orientation samples containing the quaternion.'
    output_port('heading_samples_out', 'double')
    output_port('pitch_samples_out', 'double')
    output_port('roll_samples_out', 'double')

    output_port('temp_sensors_out', '/imu_stim300/Temperature').
        doc 'provides timestamped Temperature information for gyros).'

    output_port('timestamp_estimator_status', 'aggregator::TimestampEstimatorStatus').
	doc 'Debug output of the TimestampEstimator.'

    output_port('packet_counter', 'int64_t').
	doc 'Counter for the incoming packets.'

    runtime_states :INITIAL_ALIGNMENT
    exception_states :NAN_ERROR, :ALIGNMENT_ERROR


    fd_driven

end
